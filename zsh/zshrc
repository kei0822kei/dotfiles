# -*- zshrc -*-


################################################################################
# PATH
################################################################################
if [ "$USER" = "keiyu" ]; then
  source $HOME/.zshenv
fi

################################################################################
# change behavior
################################################################################
### mizokami-ubuntu & mizo
if [ "$OSTYPE" = "linux-gnu" ]; then
  alias ls='ls -F --color=auto --show-control-char'
  alias lsf='ls -F  | grep -v / | sed s/"*"/""/g'
  alias lsd='ls -F | grep / | sed -e "s/\///"'
  alias lss='ls -F | grep @ | sed -e s/@//g'
fi

if [ "$USER" = "keiyu" ]; then
  alias ls='ls -G'
fi


################################################################################
# nvim
################################################################################
if [ "$(type nvim)" = "nvim not found" ]; then
  echo "nvim is not installed yet"
else
  alias vim='nvim'
fi
export XDG_CONFIG_HOME="$HOME/.mydot"


################################################################################
# keybind
################################################################################
stty	erase	''    # backspace
stty	intr	''    # C-c
stty	susp	''
bindkey '' history-beginning-search-backward
bindkey '' history-beginning-search-forward

### mizokami-ubuntu
if [ "$USER" = "mizokami-ubuntu" ]; then
  ### change caps, henkan and muhenkan
  setxkbmap -option user:keymap
fi


################################################################################
# history
################################################################################
HISTFILE="$ZDOTDIR/.zhistory"
HISTSIZE=10000; SAVEHIST=10000
setopt hist_ignore_dups      # 重複を記録しない
setopt share_history         # 履歴の共有
setopt hist_reduce_blanks    # 余分な空白は詰めて記録
setopt hist_expand           # 補完時にヒストリを自動的に展開
setopt list_packed           # コンパクトに補完リストを表示
setopt append_history        # 履歴をすぐに追加する(通常は終了時)


################################################################################
# completion
################################################################################
autoload -U compinit
compinit
# setopt correct               # スペルミスを補完
# setopt correct_all           # コマンドライン全てのスペルチェックをする
setopt auto_param_slash      # ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt mark_dirs             # ファイル名の展開でディレクトリにマッチした場合 末尾に / を付加
setopt auto_menu             # TABで順に補完候補を切り替える
#setopt prompt_subst          # プロンプトが表示されるたびにプロンプト文字列を評価、置換する
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'   # 大文字小文字を区別せずに補完
setopt list_types            # 補完候補一覧でファイルの種別をマーク表示


################################################################################
# visual
################################################################################
# source "$ZDOTDIR/rc/prompt.zsh" <= so late!!!

RPROMPT=$'%{\e[01;01;31m%}[%~]%{\e[00m%}'
PROMPT=$'%F{green}%m %# %f'
autoload -U colors        # プロンプトのカラー表示を有効
colors                    # → 色指定  $fg[色名]/$bg[色名]/$reset_color (${, $} で囲む必要がある)


################################################################################
# back ground
################################################################################
setopt notify                # バックグラウンドジョブが終了したら(プロンプトの表示を待たずに)すぐに知らせる
setopt nohup                 # hupしなくなる バックグラウンド処理を任せとく場合は最強らしい


################################################################################
# file
################################################################################
setopt  extended_glob        # ファイル名で #, ~, ^ の三文字を正規表現として扱う
setopt  numeric_glob_sort    # ファイル名の展開で辞書順ではなく数値的にソート
setopt  multios              # 複数のリダイレクトを記述できる
limit   coredumpsize 0       # コアダンプファイルを作らない
#setopt  noclobber            # リダイレクトによる上書き禁止


################################################################################
# language
################################################################################
export LANG='ja_JP.UTF-8'
setopt print_eight_bit       # 8bit文字を有効にする　日本語


################################################################################
# others
################################################################################
setopt no_beep               # コマンド入力エラーでBeepを鳴らさない
# setopt rm_star_wait          # rm * を実行する前に確認
setopt rm_star_silent        # rm * を実行する前に確認しない
# setopt  nounset              # 未定義の変数を使うとエラーを吐く　これがあるとanacondaのactivateが使えなくなる
setopt  long_list_jobs       # 内部コマンド jobs の出力をデフォルトで jobs -1 にする
setopt  no_checkjobs         # 終了時にSIGHUPを送信しない


################################################################################
# change key function
################################################################################
stty erase "^?"   # you can use backspace while shell script is running


################################################################################
# trash
################################################################################
### mizokami-ubuntu
if [ "$USER" = "mizokami-ubuntu" ]; then
  if type trash-put &> /dev/null; then
    alias rm=trash-put
  fi
fi


################################################################################
# mount and activate
################################################################################
### mizokami-ubuntu
if [ "$USER" = "mizokami-ubuntu" ]; then
  if [ -z "$(ls ~/VEGA)" ]; then
    sshfs mizo@vega:/home/mizo/ $HOME/VEGA
  fi
fi


################################################################################
# zplug
################################################################################
### set ZPLUG_HOME
export ZPLUG_HOME="$HOME/.mydot/zsh/.zplug"

### zplug install
if [ ! -e "$ZDOTDIR/.zplug" ]; then
  git clone https://github.com/zplug/zplug $ZPLUG_HOME
fi

### zplug setting
source $ZPLUG_HOME/init.zsh

### install plugins
zplug "mollifier/anyframe"                    # like denite.nvim
#zplug "b4b4r07/enhancd", at:v1                # at: はブランチとタグをサポートしている
zplug "junegunn/fzf-bin", from:gh-r, as:command, rename-to:"fzf"
zplug "zsh-users/zsh-autosuggestions"         # auto completion
zplug "zsh-users/zsh-completions"             # complete sub commands  ex) git <TAB>
zplug "zsh-users/zsh-syntax-highlighting"     # color
#zplug "sindresorhus/pure"     # color
#zplug "zsh-prompt-powerline"

#zplug 'jhawthorn/fzy'

if ! zplug check --verbose; then
  printf 'Install? [y/N]: '
  if read -q; then
    echo; zplug install
  fi
fi

### setting of each plugin
source "$ZDOTDIR/rc/anyframe.zsh"



zplug load --verbose

# alias
#alias fzf='fzf-bin'
#alias cb='cd-bookmark'

################################################################################
# zsh-syntax-highlighting
################################################################################
# ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern cursor root line)
#ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets pattern root line)

# main - 基本ハイライト。デフォルトではこれのみ有効
# brackets - 括弧関連
# pattern - ユーザ定義パターン
# cursor - カーソルポジション
# root - ユーザがrootの場合にコマンドライン全体に適用
# line - コマンドライン全体に適用


################################################################################
# cd-bookmark
################################################################################

################################################################################
# git prompt
################################################################################
#source prompt.sh

################################################################################
# prompt
################################################################################
# pip install powerline-shell
# 
# function powerline_precmd() {
#     PS1="$(powerline-shell --shell zsh $?)"
# }
# 
# function install_powerline_precmd() {
#   for s in "${precmd_functions[@]}"; do
#     if [ "$s" = "powerline_precmd" ]; then
#       return
#     fi
#   done
#   precmd_functions+=(powerline_precmd)
# }
# 
# if [ "$TERM" != "linux" ]; then
#     install_powerline_precmd
# fi
# 
# 
