--------------
# install nvim
--------------
How to install nvim is already written in 'zshrc'

# nodejs
conda install -c conda-forge nodejs

# ruby
sudo gem install neovim


--------------
# nvim options
--------------
# If you need log 
# ref. https://lifetestsyou.com/how-to-log-with-vim
% vim -V9logfile => log filename is 'logfile'

# check loadtime
% vim --startuptime /tmp/startuptime.txt


-------------
# normal mode
-------------
# delelte
dw => word delete
$  => delete from cursol to end of line

# command line window
c (remaped from 'q:')


--------------
# command line
--------------

# reload settings
:source ~/.mydot/nvim/init.vim

# show plugin document
:h <plugin name>

# show filetype
:echo &filetype

# history
:history => Enter; execute   i; insert mode
q: => open command line including history

# input
(insert mode) C-v + <Tab>  =>  input <Tab>

# python path where jedi-vim looks for
:python3 import sys; print(sys.path)

# shortcut
end of the line; ^
head of the line; $


--------------------
# about vim language
--------------------
# meaning of nnoremap, silent ...
ref. https://thinca.hatenablog.com/entry/20100205/1265307642

# <C-u>
ref. https://vim-jp.org/vim-users-jp/2009/07/02/Hack-35.html


---------------------
# check vim open time
---------------------
% vim --startuptime /tmp/startuptime.txt


---------
# airline
---------
# install font
https://qiita.com/uhooi/items/dc9a9657f1706283753b

to change theme => ref. https://qiita.com/myouga/items/2f241731c16cf09273ff


-----
# ale
-----
# setup
you have to install flake8
% pip install flake8
or
% conda install flake8

# enable
:ALEEnable

# disable
:ALEDisable

# currently using flake8 (settings are in ~/.config/flake8)


-----------
# braceless
-----------
zc; close a paragraph
zC; close all paragraphs
zo; open a paragraph
zO; close all paragraphs
zM; close selected paragraphs
zR; open selected paragraphs


----------
# coc.nvim
----------
gd; go to definition
K; see docstring
[g; previous navigate diagnostics
]g; next navigate diagnostics

# set interpreter
:CocCommand => python.setInterpreter => choose interpreter

# install language
:CocInstall coc-vimlsp  # vim script


------
# defx
------
# show
  .   => show ignored files

# open file
 <CR> => drop
  i   => drop split
  s   => drop vsplit
  t   => open tab

# directory
 <CR> => open and close directory
  o   => open and close directory (recursive:3)
  u   => cd ..

# handle file
  c   => copy
  m   => move
  p   => paste
  K   => create new directory
  N   => create new file
  M   => create new files
  d   => delete file
  r   => rename file

# yank and print
  yy  => yank path
<C-g> => print path


-----------
# defx-icon
-----------
# install
# ref. https://zenn.dev/hisasann/articles/e8e6b17bf9faab

----------
# dein.vim
----------

# =========================== VERY IMPORTANT ==============================
# When some plugins do not work well, run
# % rm -rf bundle
# then, restart vim and WAIT! until dein.vim shows 'DONE!' in command line.
# =========================== VERY IMPORTANT ==============================

# update dein.vim
% cd /path/to/dein/
% git pull   # not necessary? dein#update probably update dein

# update plugins
:call dein#update()
:UpdateRemotePlugins()

# clear cache (try when problem occurs)
call dein#recache_runtimepath()

# check installed plugins
:Denite dein


--------------
# closetag.vim
--------------
# Enable CloseTag
<C-l>


------------
# denite.vim
------------
# search
<C-m>b => show buffer
<C-m>c => show commands
<C-m>f => show files
<C-m>p => show bookmark
<C-m>gr => grep patterns from files
<C-m>y => show yank history

# open file
 <CR> => open
  i   => open split
  s   => open vsplit
  t   => open tab


------------
# easymotion
------------
<Leader> k => head up
<Leader> j => head down
<Leader> b => head of word up
<Leader> v => tail of word up (defaul:ge)
<Leader> w => head of word down
<Leader> e => tail of word down
<Leader> s => select charactor
<Leader> f => select charactor and jump nearest


----------
# fugitive
----------
:Gstatus => status
:Gwrite => add
:Gcommit => commit


------------
# indentLine
------------
# to switch off
:IndentLinesToggle


-----------
# landscape
-----------
color scheme


------------
# neosnippet
------------
# to open
<C-k>


------------
# neosnippet
------------
:NeoTex
:NeoTexOn
:NeoTexOff


----------
# NERDTree
----------
-- Bookmark --
:Bookmark []
:ClearBookmarks []
:ClearAllBookmarks

-- file --
m -> a; make file or directory
m -> m -> "file path"; mv
m -> d; delete
I; open or close dot file
r; update


-----------
# syntastic
-----------
:SyntasticCheck
:Error
:SyntasticInfo
setting file => $HOME/.flake8


--------
# tagbar
--------
<C-t>


---------------------
# trailing-whitespece
---------------------
highlight unnecessary trailing white space


-----------
# ultisnips
-----------
# after install
:CocInstall coc-snippets
:CocConfig => set variable "snippets.ultisnips.directories"

# check list of snippets
:CocList snippets


---------------
# vim-auto-save
---------------
deactivate <= default
activate => let g:auto_save = 1


----------
# vim-json
----------
- REPOSITORY:
https://github.com/elzr/vim-json

- FEATURE:
You can visualize "(double quatation) by settings
'let g:vim_json_syntax_conceal = 0'.

- REF:
https://qiita.com/karur4n/items/a26007236c59c5fb8735


----------
# vim-over
----------
- replace by sed
<Space> o

- relace word
<Space> r


--------------
# vim-quickrun
--------------
<C-r>


------------
# vimspector
------------
<C-s>n => VimspectorContinue
<C-s>s => VimspectorStop
<C-s>r => VimspectorRestart
<C-s>p => VimspectorPause
<C-s>b => VimspectorToggleBreakpoint
<C-s>c => VimspectorToggleConditionalBreakpoint
<C-s>a => VimspectorAddFunctionBreakpoint
<C-s>v => VimspectorStepOver
<C-s>i => VimspectorStepInto
<C-s>o => VimspectorStepOut
<C-s>u => VimspectorRunToCursor


 ~~ (does not work well) ~~
---------------------
# python2 and python3
---------------------
### make neovim2 neovim3 environment in which python 2 and 3 is used.
### then
let g:python_host_prog = $PYENV_ROOT.'/versions/anaconda3-2019.10/envs/neovim2/bin/python'
let g:python3_host_prog = $PYENV_ROOT.'/versions/anaconda3-2019.10/envs/neovim3/bin/python'
 ~~ (does not work well) ~~
